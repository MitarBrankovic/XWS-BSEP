version: "3.8"

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    ports:
      - 8001:${USER_SERVICE_PORT}
    environment:
      OS_ENV: docker
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
      UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
    depends_on:
      - user_db
    networks:
      - network

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    ports:
      - 8002:${POST_SERVICE_PORT}
    environment:
      OS_ENV: docker
      POST_DB_HOST: ${POST_DB_HOST}
      POST_DB_PORT: ${POST_DB_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
      UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
    depends_on:
      - post_db
    networks:
      - network

  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./connection_service/Dockerfile
    restart: on-failure
    ports:
      - 8003:${CONNECTION_SERVICE_PORT}
    environment:
      OS_ENV: docker
      CONNECTION_DB_HOST: ${CONNECTION_DB_HOST}
      CONNECTION_DB_PORT: ${CONNECTION_DB_PORT}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
      UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
    depends_on:
      - connection_db
    networks:
      - network

  offer_service:
    image: offer_service
    container_name: offer_service
    build:
      context: .
      dockerfile: ./offer_service/Dockerfile
    restart: on-failure
    ports:
      - 8004:${OFFER_SERVICE_PORT}
    environment:
      OS_ENV: docker
      OFFER_DB_HOST: ${OFFER_DB_HOST}
      OFFER_DB_PORT: ${OFFER_DB_PORT}
      OFFER_SERVICE_PORT: ${OFFER_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
    depends_on:
      - offer_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      OS_ENV: docker
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      OFFER_SERVICE_HOST: ${OFFER_SERVICE_HOST}
      OFFER_SERVICE_PORT: ${OFFER_SERVICE_PORT}
    networks:
      - network

  user_db:
    image: mongo
    container_name: user_db
    restart: on-failure
    networks:
      - network

  post_db:
    image: mongo
    container_name: post_db
    restart: on-failure
    networks:
      - network

  connection_db:
    image: mongo
    container_name: connection_db
    restart: on-failure
    networks:
      - network

  offer_db:
    image: mongo
    container_name: offer_db
    restart: on-failure
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

networks:
  network:
    driver: bridge