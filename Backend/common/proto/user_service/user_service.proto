syntax = "proto3";

option go_package = "dislinkt/common/user";

package user;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";


service UserService{

  rpc FindByUsername(FindByUsernameRequest) returns(FindByUsernameResponse) {
    option (google.api.http) = {
      get: "/user/findByUsername/{username}"
    };
  }

  rpc Get(GetRequest) returns(GetResponse) {
    option (google.api.http) = {
      get: "/user/{id}"
    };
  }
  rpc GetAll(GetAllRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/user"
    };
  }
  rpc GetAllPublic(GetAllRequest) returns(GetAllResponse) {
    option (google.api.http) = {
      get: "/publicUsers"
    };
  }

  rpc GetAllUsernames(GetAllRequest) returns(GetAllUsernamesResponse) {
    option (google.api.http) = {
      get: "/getAllUsernames"
    };
  }

  rpc Create(CreateRequest) returns(CreateResponse) {
    option (google.api.http) = {
      post: "/user"
      body: "user"
    };
  }
  rpc Update(UpdateRequest) returns(UpdateResponse) {
    option (google.api.http) = {
      put: "/user/{id}"
      body: "user"
    };
  }
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/login"
      body : "*"
    };
  };

  rpc LoginTwoFactor(LoginRequest) returns (TwoFactorResponse) {
    option (google.api.http) = {
      post : "/loginTwoFactor"
      body : "*"
    };
  };

  //lose napisani request i response
  rpc CheckTwoFactor(CheckTwoFactorRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/checkTwoFactor"
      body : "*"
    };
  };

  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post : "/register"
      body : "user"
    };
  };

  rpc ActivateAccount(ActivateRequest) returns (ActivateResponse) {
    option (google.api.http) = {
      get : "/activate/{token}"
    };
  };

  rpc PasswordlessLoginDemand(PasswordlessLoginDemandRequest) returns (PasswordlessLoginDemandResponse) {
    option (google.api.http) = {
      get : "/loginDemand/{username}"
    };
  };

  rpc PasswordlessLogin(PasswordlesLoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      get : "/login/{token}"
    };
  };

  rpc RecoverAccountDemand(RecoverAccountDemandRequest) returns (RecoverAccountDemandResponse) {
    option (google.api.http) = {
      post : "/recover"
      body : "*"
    };
  };

  rpc RecoverAccount(RecoverAccountRequest) returns (RecoverAccountResponse) {
    option (google.api.http) = {
      put : "/recover/{token}"
      body : "*"
    };
  };

  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      put : "/changePassword/{username}"
      body : "*"
    };
  };

  rpc GenerateApiToken(GenerataApiTokenRequest) returns (GenerateApiTokenResponse) {
    option (google.api.http) = {
      post : "/generateApiToken"
      body : "*"
    };
  };
  rpc CheckApiToken(CheckApiTokenRequest) returns (CheckApiTokenResponse) {
    option (google.api.http) = {
      get : "/checkApiToken/{token}"
    };
  };

  rpc Block(BlockRequest) returns(BlockResponse) {
    option (google.api.http) = {
      post: "/block"
      body: "block"
    };
  }

  rpc UnBlock(UnBlockRequest) returns(UnBlockResponse) {
    option (google.api.http) = {
      post: "/unblock"
      body: "block"
    };
  }

  rpc GetAllBlock(GetAllRequest) returns(GetAllBlockResponse) {
    option (google.api.http) = {
      get: "/block"
    };
  }

  rpc Notification(NotificationRequest) returns(NotificationResponse) {
    option (google.api.http) = {
      post: "/notification"
      body: "notification"
    };
  }

  rpc DeleteNotification(NotificationRequest) returns(NotificationResponse) {
    option (google.api.http) = {
      post: "/notification/delete"
      body: "notification"
    };
  }

  rpc GetNotifications(NotificationsRequest) returns(NotificationsResponse) {
    option (google.api.http) = {
      get: "/notification/{username}"
    };
  }
}

message NotificationRequest{
  Notification notification = 1;
}

message NotificationResponse{
  bool success = 1;
}

message NotificationsRequest{
  string username = 1;
}

message NotificationsResponse{
  repeated Notification notification = 1;
}

message FindByUsernameRequest {
  string username = 1;
}

message FindByUsernameResponse{
  User user = 1;
}

message GetRequest {
  string id = 1;
}

message GetResponse {
  User user = 1;
}

message GetAllRequest {
}

message GetAllResponse {
  repeated User users = 1;
}

message GetAllBlockResponse {
  repeated Block blocks = 1;
}

message GetAllUsernamesResponse {
  repeated string usernames = 1;
}

message CreateRequest {
  User user = 1;
}

message CreateResponse {
  User user = 1;
}

message BlockRequest {
  Block block = 1;
}

message BlockResponse {
  bool success = 1;
}

message UnBlockRequest {
  Block block = 1;
}

message UnBlockResponse {
  bool success = 1;
}

message UpdateRequest {
  string id = 1;
  User user = 2;
}

message UpdateResponse {
  User user = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string access_token = 1;
}

message RegisterRequest {
  User user = 1;
}

message RegisterResponse {
  User user = 1;
}

message ActivateRequest {
  string token = 1;
}

message ActivateResponse {
  User user = 1;
}

message RecoverAccountDemandRequest {
  string email = 1;
}

message RecoverAccountDemandResponse {}

message RecoverAccountRequest {
  string token = 1;
  string newPassword = 2;
}

message RecoverAccountResponse {}

message PasswordlessLoginDemandRequest{
  string username = 1;
}

message PasswordlessLoginDemandResponse{
  string email = 1;
}

message PasswordlesLoginRequest{
  string token = 1;
}

message ChangePasswordRequest{
  string username = 1;
  string oldPassword = 2;
  string newPassword = 3;
}

message ChangePasswordResponse {}

message GenerataApiTokenRequest{
  string username = 1;
  string password = 2;
}

message GenerateApiTokenResponse{
  string token = 1;
}

message CheckApiTokenRequest{
  string token = 1;
}

message CheckApiTokenResponse{
  bool valid = 1;
}

message CheckTwoFactorRequest{
  string token = 1;
}

message TwoFactorResponse{
  string token = 1;
}

message User {
  string id = 1;
  string username = 2;
  string password = 3;
  string firstName = 4;
  string lastName = 5;
  google.protobuf.Timestamp dateOfBirth = 6;
  string email = 7;
  repeated Education education = 8;
  repeated WorkExperience workExperience = 9;
  repeated string skills = 10;
  repeated string interests = 11;
  bool activated = 12;
  bool private = 13;
  bool twoFactorEnabled = 14;
  bool followNotification = 15;
  bool postNotification = 16;
  bool messageNotification = 17;
}

message Education{
  string school = 1;
  string degree = 2;
  string fieldOfStudy = 3;
  google.protobuf.Timestamp startDate = 4;
  google.protobuf.Timestamp  endDate = 5;
}

message WorkExperience{
  string title = 1;
  string company = 2;
  enum EmploymentType {
    FULL_TIME = 0;
    PART_TIME = 1;
    INTERNSHIP = 2;
  };
  EmploymentType employmentType = 3;
  string location = 4;
  google.protobuf.Timestamp startDate = 5;
  google.protobuf.Timestamp endDate = 6;
}

message Block{
  string issuerUsername = 1;
  string subjectUsername = 2;
}

message Notification{
  string id = 1;
  int64 type = 2;
  string message = 3;
  string username = 4;
}
